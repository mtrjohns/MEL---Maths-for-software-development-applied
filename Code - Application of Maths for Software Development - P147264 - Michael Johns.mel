// Question 1:
// Procedure to calculate the length of a vector
proc float vectorLength( float $lengthX, float $lengthY, float $lengthZ )
{
    // Use Pythagoras' Theorem
    float $lengthResult = $lengthX * $lengthX + $lengthY * $lengthY + $lengthZ * $lengthZ;
    // Calculate the square root of the result
    // Return the answer
    return sqrt($lengthResult);
}
// Enter values of a vector to find the vector length
vectorLength(5, 2, 1);

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 2
2.2 Code - Normalising a Vector
// Procedure to find the normalization of a given vector
proc vector vectorNormalisation( vector $norm )
{
	// Calculate the length of the vector using procedure 'vectorLength'
	float $length = vectorLength($norm.x, $norm.y, $norm.z);
	// Take each vector value x, y, z and divide each by the length
	float $normX = $norm.x / $length;
	float $normY = $norm.y / $length;
	float $normZ = $norm.z / $length;
	return << $normX, $normY, $normZ >>;
}
vectorNormalisation<< 6, 3, 8 >>;

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 3:
// Procedure to find the distance between two Points
proc float vectorDistance( float $p0X, float $p0Y, float $p0Z, float $p1X, float $p1Y, float $p1Z )
{
    // Subtract point 2 from point 1 for each component x, y, z
    $p3X = $p1X - $p0X;
    $p3Y = $p1Y - $p0Y;
    $p3Z = $p1Z - $p0Z;
    // Calculate the distance between both vectors using procedure 'vectorLength'
    return vectorLength($p3X, $p3Y, $p3Z);
}
// Enter values of two vectors to find the distance between two points
vectorDistance(9, 3, 5, 4, 2, 8)

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 4:
// Procedure to find the dot product of two vectors
proc float vectorDot( float $dotP0X, float $dotP0Y, float $dotP0Z, float $dotP1X, float $dotP1Y, float $dotP1Z )
{
    // Multiply the first vector by the second vector
    // Add each above answer together
    return ( $dotP0X * $dotP1X + $dotP0Y * $dotP1Y + $dotP0Z * $dotP1Z );
}
vectorDot(1, 2, 5, 2, 1, 3)

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 5:
//procedure to Multiply a (4x4) and a (4x4) Matrix
proc string multiply4By4(float $matrix1[], float $matrix2[])
{
    // Multiplied Matrix result
    float $matrix3[16];
	
    // Row 1 of resulting Matrix
    $matrix3[0] = ($matrix1[0] * $matrix2[0]) + ($matrix1[1] * $matrix2[4]) + ($matrix1[2] * $matrix2[8]) + ($matrix1[3] * $matrix2[12]);
    $matrix3[1] = ($matrix1[0] * $matrix2[1]) + ($matrix1[1] * $matrix2[5]) + ($matrix1[2] * $matrix2[9]) + ($matrix1[3] * $matrix2[13]);
    $matrix3[2] = ($matrix1[0] * $matrix2[2]) + ($matrix1[1] * $matrix2[6]) + ($matrix1[2] * $matrix2[10]) + ($matrix1[3] * $matrix2[14]);
    $matrix3[3] = ($matrix1[0] * $matrix2[3]) + ($matrix1[1] * $matrix2[7]) + ($matrix1[2] * $matrix2[11]) + ($matrix1[3] * $matrix2[15]);
	
    // Row 2 of resulting Matrix
    $matrix3[4] = ($matrix1[4] * $matrix2[0]) + ($matrix1[5] * $matrix2[4]) + ($matrix1[6] * $matrix2[8]) + ($matrix1[7] * $matrix2[12]);
    $matrix3[5] = ($matrix1[4] * $matrix2[1]) + ($matrix1[5] * $matrix2[5]) + ($matrix1[6] * $matrix2[9]) + ($matrix1[7] * $matrix2[13]);
    $matrix3[6] = ($matrix1[4] * $matrix2[2]) + ($matrix1[5] * $matrix2[6]) + ($matrix1[6] * $matrix2[10]) + ($matrix1[7] * $matrix2[14]);
    $matrix3[7] = ($matrix1[4] * $matrix2[3]) + ($matrix1[5] * $matrix2[7]) + ($matrix1[6] * $matrix2[11]) + ($matrix1[7] * $matrix2[15]);
	
    // Row 3 of resulting Matrix
    $matrix3[8] = ($matrix1[8] * $matrix2[0]) + ($matrix1[8] * $matrix2[4]) + ($matrix1[8] * $matrix2[8]) + ($matrix1[8] * $matrix2[12]);
    $matrix3[9] = ($matrix1[8] * $matrix2[1]) + ($matrix1[9] * $matrix2[5]) + ($matrix1[10] * $matrix2[9]) + ($matrix1[11] * $matrix2[13]);
    $matrix3[10] = ($matrix1[8] * $matrix2[2]) + ($matrix1[9] * $matrix2[6]) + ($matrix1[10] * $matrix2[10]) + ($matrix1[11] * $matrix2[14]);
    $matrix3[11] = ($matrix1[8] * $matrix2[3]) + ($matrix1[9] * $matrix2[7]) + ($matrix1[10] * $matrix2[11]) + ($matrix1[11] * $matrix2[15]);
	
    // Row 4 of resulting Matrix
    $matrix3[12] = ($matrix1[12] * $matrix2[0]) + ($matrix1[13] * $matrix2[4]) + ($matrix1[14] * $matrix2[8]) + ($matrix1[15] * $matrix2[12]);
    $matrix3[13] = ($matrix1[12] * $matrix2[1]) + ($matrix1[13] * $matrix2[5]) + ($matrix1[14] * $matrix2[9]) + ($matrix1[15] * $matrix2[13]);
    $matrix3[14] = ($matrix1[12] * $matrix2[2]) + ($matrix1[13] * $matrix2[6]) + ($matrix1[14] * $matrix2[10]) + ($matrix1[15] * $matrix2[14]);
    $matrix3[15] = ($matrix1[12] * $matrix2[3]) + ($matrix1[13] * $matrix2[7]) + ($matrix1[14] * $matrix2[11]) + ($matrix1[15] * $matrix2[15]);
    
    // Print resulting matrix of matrix 1 * matrix 2
    print("\nResult of: Multiply a (4x4) and a (4x4) Matrix\n");
    string $row1 = print($matrix3[0] + "\t" + $matrix3[1] + "\t" + $matrix3[2] + "\t" + $matrix3[3] + "\n");
    string $row2 = print($matrix3[4] + "\t" + $matrix3[5] + "\t" + $matrix3[6] + "\t" + $matrix3[7] + "\n");
    string $row3 = print($matrix3[8] + "\t" + $matrix3[9] + "\t" + $matrix3[10] + "\t" + $matrix3[11] + "\n");
    string $row4 = print($matrix3[12] + "\t" + $matrix3[13] + "\t" + $matrix3[14] + "\t" + $matrix3[15] + "\n");
    // Store result Matrix
    string $printer = print($row1 + $row2 + $row3 + $row4)
    return $printer;
}
float $matrix1[16] = {2, 2, 3, 1, 3, 2, 4, -2, 1, 0, 1, 2, 3, 2, 0, 1};
float $matrix2[16] = {1, 2, 1, -4, 3, 1, 0, 0, 2, 1, 1, 1, 3, 4, -1, 1};
multiply4By4($matrix1, $matrix2)

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 6:
// procedure to Multiply a (4x4) and a (4x1) Matrix
proc string multiply4By1(float $matrix1[], float $matrix2[])
{
    // Multiplied Matrix result
    float $matrix3[4];

    // Multiply Matrices together
    $matrix3[0] = ($matrix1[0] * $matrix2[0]) + ($matrix1[1] * $matrix2[1]) + ($matrix1[2] * $matrix2[2]) + ($matrix1[3] * $matrix2[3]);
    $matrix3[1] = ($matrix1[4] * $matrix2[0]) + ($matrix1[5] * $matrix2[1]) + ($matrix1[6] * $matrix2[2]) + ($matrix1[7] * $matrix2[3]);
    $matrix3[2] = ($matrix1[8] * $matrix2[0]) + ($matrix1[9] * $matrix2[1]) + ($matrix1[10] * $matrix2[2]) + ($matrix1[11] * $matrix2[3]);
    $matrix3[3] = ($matrix1[12] * $matrix2[0]) + ($matrix1[13] * $matrix2[1]) + ($matrix1[14] * $matrix2[2]) + ($matrix1[15] * $matrix2[3]);
    
    // Print resulting matrix of matrix1 * matrix2 
    string $printer = print($matrix3[0] + "\n" + $matrix3[1] + "\n" + $matrix3[2] + "\n" + $matrix3[3] + "\n");
    return $printer;
}
float $matrix1[16] = {3, 1, 1, 0, 3, 0, 2, 0, 1, 2, 5, 0, 0, 0, 0, 1};
float $matrix2[4] = {4, 1, 3, 1};
multiply4By1($matrix1, $matrix2)

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Question 7
// Procedure to calculate Mean
proc float mean(float $input[])
{
int $i = 0.0;
float $mean = 0.0;

// Find amount of numbers entered
int $size = size($input);
    // Loop to add each number together
    for($i; $i < $size; $i++)
    {
        $mean = $mean + $input[$i];
    }
    // Divide total number by amount of numbers
    $mean = $mean / $size;
    
    // Print result
    print("\nMean:\n");
    return $mean;
}
float $input[] = {1.3, 7.1, 5.6};
mean($input);

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Procedure to calculate Median
proc float median(float $input[])
{

    int $i;
    int $j;
    float $store;
    float $median;
    
    // Find amount of numbers entered
    float $size = size($input);
    
    // Sort number in order from smallest first
    for($i; $i < $size; $i++)
    {

        for($j = 0; $j  < $size - 1; $j++)
        {
            // If current value is larger than next, swap values
            if($input[$j] >= $input[$j + 1])
            {
                $store = $input[$j];
                $input[$j] = $input[$j + 1];
                $input[$j + 1] = $store;
            }
        }
    }

    // Check if amount of values entered is even
    // If even find two middle numbers and calculate mean
    if($size % 2 == 0)
    {
        // Find midpoint of amount of numbers entered
        int $store = ($size - 1) / 2;
        // add midpoint number and next higher number
        $median = $input[$store] + $input[$store + 1];
        // calculate the mean(average) of the two numbers
        $median = $median / 2.0;
    }
    // Else assign middle number to median value
    else
    {
        // Find midpoint of amount of numbers entered
        int $store = ($size - 1) / 2;
        // Apply final answer to median value
        $median = $input[$store];
    }
    
    return $median;
}
// Enter number to find the Median
// A comma between each number is required
float $input[] = {1.1, 10.0, 4.3, 0.3, 0.6, 7.1, 3.2, 3.3, 3.2};
median($input);

/* #########################################################################
   #########################################################################
   ######################################################################### */

// Procedure to find the mode
proc string mode(float $input[])
{
    int $i = 0;
    int $j = 0;
    int $count1 = 1;
    int $count2 = 1;
    float $mode = $input[0];
    float $store;
    
    // Find amount of numbers entered
    float $size = size($input);
    
    // Sort number in order from smallest first
    for($i; $i < $size; $i++)
    {

        for($j = 0; $j  < $size - 1; $j++)
        {
            // If current value is larger than next, swap values
            if($input[$j] >= $input[$j + 1])
            {
                $store = $input[$j];
                $input[$j] = $input[$j + 1];
                $input[$j + 1] = $store;
            }
        }
    }
    
    // For loop to count and store if  number has more than one value
    $i = 0;
    for($i; $i < $size; $i++)
    {
        // Check if current value is the same as next value
        if($input[$i] == $input[$i + 1])
        {
            // Add 1 to counter if the numbers are the same
            $count1 = $count1 + 1;
            // If amount of identical numbers is greater than last number checked
            if($count1 > $count2)
            {
                // set $count2 to higher value
                $count2 = $count1;
                // Set mode as current array value
                $mode = $input[$i];
            }
        }
        // Reset counter
        else
        $count1 = 1;
    }
    // Check to see if there was a valid mode
    if($count2 == 1)
    {
        // Assign mode display the below message
        $mode = print("This set of numbers has no mode. Each number occurs only once.\n"); 
    }
    
    $printer = $mode;
    return $printer;
}
float $input[] = {10.2, 1.1, 1.1, 1.1, 0.3, 1.3, 0.3, 0.6, 3.5, 3.6};
mode($input);

/* #########################################################################
   #########################################################################
   ######################################################################### */
   
// Procedure to calculate Standard Deviation
proc float standardDeviation(float $input[])
{
    int $i = 0;
    
    // Find amount of numbers entered
    int $size = size($input);
    
    // Find the mean
    float $StanDev = mean($input); 
    
    // Find the variance
    for($i; $i < $size; $i++)
    {
        // Take away the mean from each value to find the difference
        $input[$i] = $input[$i] - $StanDev;
        // Square each value's result
        $input[$i] = $input[$i] * $input[$i];
    }
        // Find the mean and squareroot
        $StanDev = sqrt(mean($input));

        return $StanDev;
}
float $input[] = {10.2, 0.4, 1.3, 0.6};
standardDeviation($input);